
C:\Users\ilyav\AppData\Local\Temp\arduino\sketches\73A6629CA23D1442F8AE9CC30A7E9A1C/IDP2024F_10.28.2024.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 10 03 	jmp	0x620	; 0x620 <__vector_16>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 80 03 	jmp	0x700	; 0x700 <__vector_18>
      4c:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_19>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	25 00       	.word	0x0025	; ????
      6e:	28 00       	.word	0x0028	; ????
      70:	2b 00       	.word	0x002b	; ????

00000072 <port_to_mode_PGM>:
      72:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000007c <digital_pin_to_port_PGM>:
      7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      8c:	03 03 03 03 02 02 03                                .......

00000093 <digital_pin_to_bit_mask_PGM>:
      93:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a3:	04 08 10 20 40 80 40                                ... @.@

000000aa <__ctors_start>:
__ctors_start():
      aa:	2a 06       	cpc	r2, r26

000000ac <__ctors_end>:
__dtors_end():
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d8 e0       	ldi	r29, 0x08	; 8
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      b8:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      ba:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      bc:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      be:	ea e7       	ldi	r30, 0x7A	; 122
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      c0:	f1 e1       	ldi	r31, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      c4:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      c6:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      c8:	a4 34       	cpi	r26, 0x44	; 68
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      ca:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      ce:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      d0:	a4 e4       	ldi	r26, 0x44	; 68
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      d2:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      d8:	aa 30       	cpi	r26, 0x0A	; 10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      da:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>

000000de <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      de:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      e0:	c6 e5       	ldi	r28, 0x56	; 86
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      e2:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      e4:	04 c0       	rjmp	.+8      	; 0xee <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      e6:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      e8:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      ea:	0e 94 b5 08 	call	0x116a	; 0x116a <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      ee:	c5 35       	cpi	r28, 0x55	; 85
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      f0:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      f2:	c9 f7       	brne	.-14     	; 0xe6 <__do_global_ctors+0x8>
      f4:	0e 94 b2 03 	call	0x764	; 0x764 <main>
      f8:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <_exit>

000000fc <__bad_interrupt>:
__vector_22():
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <pinMode>:
pinMode():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	fc 01       	movw	r30, r24
     108:	ed 56       	subi	r30, 0x6D	; 109
     10a:	ff 4f       	sbci	r31, 0xFF	; 255
     10c:	24 91       	lpm	r18, Z
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     10e:	84 58       	subi	r24, 0x84	; 132
     110:	9f 4f       	sbci	r25, 0xFF	; 255
     112:	fc 01       	movw	r30, r24
     114:	84 91       	lpm	r24, Z
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     116:	88 23       	and	r24, r24
     118:	d1 f0       	breq	.+52     	; 0x14e <pinMode+0x4e>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	88 0f       	add	r24, r24
     11e:	99 1f       	adc	r25, r25
     120:	fc 01       	movw	r30, r24
     122:	ee 58       	subi	r30, 0x8E	; 142
     124:	ff 4f       	sbci	r31, 0xFF	; 255
     126:	a5 91       	lpm	r26, Z+
     128:	b4 91       	lpm	r27, Z
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     12a:	fc 01       	movw	r30, r24
     12c:	e8 59       	subi	r30, 0x98	; 152
     12e:	ff 4f       	sbci	r31, 0xFF	; 255
     130:	c5 91       	lpm	r28, Z+
     132:	d4 91       	lpm	r29, Z
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     134:	61 11       	cpse	r22, r1
     136:	0e c0       	rjmp	.+28     	; 0x154 <pinMode+0x54>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     138:	9f b7       	in	r25, 0x3f	; 63
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     13a:	f8 94       	cli
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     13c:	8c 91       	ld	r24, X
     13e:	e2 2f       	mov	r30, r18
     140:	e0 95       	com	r30
     142:	8e 23       	and	r24, r30
     144:	8c 93       	st	X, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     146:	28 81       	ld	r18, Y
     148:	e2 23       	and	r30, r18
     14a:	e8 83       	st	Y, r30
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     14c:	9f bf       	out	0x3f, r25	; 63
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	08 95       	ret
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     154:	8f b7       	in	r24, 0x3f	; 63
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     156:	f8 94       	cli
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     158:	ec 91       	ld	r30, X
     15a:	e2 2b       	or	r30, r18
     15c:	ec 93       	st	X, r30
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     15e:	8f bf       	out	0x3f, r24	; 63
     160:	f6 cf       	rjmp	.-20     	; 0x14e <pinMode+0x4e>

00000162 <micros>:
micros():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     162:	3f b7       	in	r19, 0x3f	; 63
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     164:	f8 94       	cli
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     166:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <timer0_overflow_count>
     16a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <timer0_overflow_count+0x1>
     16e:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <timer0_overflow_count+0x2>
     172:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <timer0_overflow_count+0x3>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     176:	26 b5       	in	r18, 0x26	; 38
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     178:	a8 9b       	sbis	0x15, 0	; 21
     17a:	05 c0       	rjmp	.+10     	; 0x186 <micros+0x24>
     17c:	2f 3f       	cpi	r18, 0xFF	; 255
     17e:	19 f0       	breq	.+6      	; 0x186 <micros+0x24>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     180:	01 96       	adiw	r24, 0x01	; 1
     182:	a1 1d       	adc	r26, r1
     184:	b1 1d       	adc	r27, r1
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     186:	3f bf       	out	0x3f, r19	; 63
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     188:	ba 2f       	mov	r27, r26
     18a:	a9 2f       	mov	r26, r25
     18c:	98 2f       	mov	r25, r24
     18e:	88 27       	eor	r24, r24
     190:	bc 01       	movw	r22, r24
     192:	cd 01       	movw	r24, r26
     194:	62 0f       	add	r22, r18
     196:	71 1d       	adc	r23, r1
     198:	81 1d       	adc	r24, r1
     19a:	91 1d       	adc	r25, r1
     19c:	42 e0       	ldi	r20, 0x02	; 2
     19e:	66 0f       	add	r22, r22
     1a0:	77 1f       	adc	r23, r23
     1a2:	88 1f       	adc	r24, r24
     1a4:	99 1f       	adc	r25, r25
     1a6:	4a 95       	dec	r20
     1a8:	d1 f7       	brne	.-12     	; 0x19e <micros+0x3c>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     1aa:	08 95       	ret

000001ac <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     1ac:	af 92       	push	r10
     1ae:	bf 92       	push	r11
     1b0:	cf 92       	push	r12
     1b2:	df 92       	push	r13
     1b4:	ef 92       	push	r14
     1b6:	ff 92       	push	r15
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	6c 01       	movw	r12, r24
     1c2:	7b 01       	movw	r14, r22
     1c4:	8b 01       	movw	r16, r22
     1c6:	04 0f       	add	r16, r20
     1c8:	15 1f       	adc	r17, r21
     1ca:	eb 01       	movw	r28, r22
     1cc:	5e 01       	movw	r10, r28
     1ce:	ae 18       	sub	r10, r14
     1d0:	bf 08       	sbc	r11, r15
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     1d2:	c0 17       	cp	r28, r16
     1d4:	d1 07       	cpc	r29, r17
     1d6:	59 f0       	breq	.+22     	; 0x1ee <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     1d8:	69 91       	ld	r22, Y+
     1da:	d6 01       	movw	r26, r12
     1dc:	ed 91       	ld	r30, X+
     1de:	fc 91       	ld	r31, X
     1e0:	01 90       	ld	r0, Z+
     1e2:	f0 81       	ld	r31, Z
     1e4:	e0 2d       	mov	r30, r0
     1e6:	c6 01       	movw	r24, r12
     1e8:	09 95       	icall
     1ea:	89 2b       	or	r24, r25
     1ec:	79 f7       	brne	.-34     	; 0x1cc <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     1ee:	c5 01       	movw	r24, r10
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	bf 90       	pop	r11
     202:	af 90       	pop	r10
     204:	08 95       	ret

00000206 <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     206:	fc 01       	movw	r30, r24
     208:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     20a:	44 8d       	ldd	r20, Z+28	; 0x1c
     20c:	25 2f       	mov	r18, r21
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	84 2f       	mov	r24, r20
     212:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     214:	82 1b       	sub	r24, r18
     216:	93 0b       	sbc	r25, r19
     218:	54 17       	cp	r21, r20
     21a:	10 f0       	brcs	.+4      	; 0x220 <HardwareSerial::availableForWrite()+0x1a>
     21c:	cf 96       	adiw	r24, 0x3f	; 63
     21e:	08 95       	ret
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     220:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     222:	08 95       	ret

00000224 <HardwareSerial::read()>:
read():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     224:	fc 01       	movw	r30, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     226:	91 8d       	ldd	r25, Z+25	; 0x19
     228:	82 8d       	ldd	r24, Z+26	; 0x1a
     22a:	98 17       	cp	r25, r24
     22c:	61 f0       	breq	.+24     	; 0x246 <HardwareSerial::read()+0x22>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     22e:	a2 8d       	ldd	r26, Z+26	; 0x1a
     230:	ae 0f       	add	r26, r30
     232:	bf 2f       	mov	r27, r31
     234:	b1 1d       	adc	r27, r1
     236:	5d 96       	adiw	r26, 0x1d	; 29
     238:	8c 91       	ld	r24, X
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     23a:	92 8d       	ldd	r25, Z+26	; 0x1a
     23c:	9f 5f       	subi	r25, 0xFF	; 255
     23e:	9f 73       	andi	r25, 0x3F	; 63
     240:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	08 95       	ret
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     246:	8f ef       	ldi	r24, 0xFF	; 255
     248:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     24a:	08 95       	ret

0000024c <HardwareSerial::peek()>:
peek():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     24c:	fc 01       	movw	r30, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     24e:	91 8d       	ldd	r25, Z+25	; 0x19
     250:	82 8d       	ldd	r24, Z+26	; 0x1a
     252:	98 17       	cp	r25, r24
     254:	31 f0       	breq	.+12     	; 0x262 <HardwareSerial::peek()+0x16>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     256:	82 8d       	ldd	r24, Z+26	; 0x1a
     258:	e8 0f       	add	r30, r24
     25a:	f1 1d       	adc	r31, r1
     25c:	85 8d       	ldd	r24, Z+29	; 0x1d
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	08 95       	ret
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     262:	8f ef       	ldi	r24, 0xFF	; 255
     264:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     266:	08 95       	ret

00000268 <HardwareSerial::available()>:
available():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     268:	fc 01       	movw	r30, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     26a:	91 8d       	ldd	r25, Z+25	; 0x19
     26c:	22 8d       	ldd	r18, Z+26	; 0x1a
     26e:	89 2f       	mov	r24, r25
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	80 5c       	subi	r24, 0xC0	; 192
     274:	9f 4f       	sbci	r25, 0xFF	; 255
     276:	82 1b       	sub	r24, r18
     278:	91 09       	sbc	r25, r1
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     27a:	8f 73       	andi	r24, 0x3F	; 63
     27c:	99 27       	eor	r25, r25
     27e:	08 95       	ret

00000280 <Serial0_available()>:
Serial0_available():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     280:	8d e6       	ldi	r24, 0x6D	; 109
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	0e 94 34 01 	call	0x268	; 0x268 <HardwareSerial::available()>
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	89 2b       	or	r24, r25
     28c:	09 f4       	brne	.+2      	; 0x290 <Serial0_available()+0x10>
     28e:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     290:	82 2f       	mov	r24, r18
     292:	08 95       	ret

00000294 <serialEventRun()>:
serialEventRun():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	89 2b       	or	r24, r25
     29a:	29 f0       	breq	.+10     	; 0x2a6 <serialEventRun()+0x12>
     29c:	0e 94 40 01 	call	0x280	; 0x280 <Serial0_available()>
     2a0:	81 11       	cpse	r24, r1
     2a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     2a6:	08 95       	ret

000002a8 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     2a8:	fc 01       	movw	r30, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     2aa:	a4 8d       	ldd	r26, Z+28	; 0x1c
     2ac:	a8 0f       	add	r26, r24
     2ae:	b9 2f       	mov	r27, r25
     2b0:	b1 1d       	adc	r27, r1
     2b2:	a3 5a       	subi	r26, 0xA3	; 163
     2b4:	bf 4f       	sbci	r27, 0xFF	; 255
     2b6:	2c 91       	ld	r18, X
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     2b8:	84 8d       	ldd	r24, Z+28	; 0x1c
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	8f 73       	andi	r24, 0x3F	; 63
     2c0:	99 27       	eor	r25, r25
     2c2:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     2c4:	a6 89       	ldd	r26, Z+22	; 0x16
     2c6:	b7 89       	ldd	r27, Z+23	; 0x17
     2c8:	2c 93       	st	X, r18
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     2ca:	a0 89       	ldd	r26, Z+16	; 0x10
     2cc:	b1 89       	ldd	r27, Z+17	; 0x11
     2ce:	8c 91       	ld	r24, X
     2d0:	83 70       	andi	r24, 0x03	; 3
     2d2:	80 64       	ori	r24, 0x40	; 64
     2d4:	8c 93       	st	X, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     2d6:	93 8d       	ldd	r25, Z+27	; 0x1b
     2d8:	84 8d       	ldd	r24, Z+28	; 0x1c
     2da:	98 13       	cpse	r25, r24
     2dc:	06 c0       	rjmp	.+12     	; 0x2ea <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     2de:	02 88       	ldd	r0, Z+18	; 0x12
     2e0:	f3 89       	ldd	r31, Z+19	; 0x13
     2e2:	e0 2d       	mov	r30, r0
     2e4:	80 81       	ld	r24, Z
     2e6:	8f 7d       	andi	r24, 0xDF	; 223
     2e8:	80 83       	st	Z, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     2ea:	08 95       	ret

000002ec <HardwareSerial::write(unsigned char)>:
write():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     2ec:	ef 92       	push	r14
     2ee:	ff 92       	push	r15
     2f0:	0f 93       	push	r16
     2f2:	1f 93       	push	r17
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	ec 01       	movw	r28, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     2fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
     300:	8c 8d       	ldd	r24, Y+28	; 0x1c
     302:	98 13       	cpse	r25, r24
     304:	1a c0       	rjmp	.+52     	; 0x33a <HardwareSerial::write(unsigned char)+0x4e>
     306:	e8 89       	ldd	r30, Y+16	; 0x10
     308:	f9 89       	ldd	r31, Y+17	; 0x11
     30a:	80 81       	ld	r24, Z
     30c:	85 ff       	sbrs	r24, 5
     30e:	15 c0       	rjmp	.+42     	; 0x33a <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     310:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\ilyav\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     312:	f8 94       	cli
write():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     314:	ee 89       	ldd	r30, Y+22	; 0x16
     316:	ff 89       	ldd	r31, Y+23	; 0x17
     318:	60 83       	st	Z, r22
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     31a:	e8 89       	ldd	r30, Y+16	; 0x10
     31c:	f9 89       	ldd	r31, Y+17	; 0x11
     31e:	80 81       	ld	r24, Z
     320:	83 70       	andi	r24, 0x03	; 3
     322:	80 64       	ori	r24, 0x40	; 64
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     324:	80 83       	st	Z, r24
__iRestore():
c:\users\ilyav\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     326:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	08 95       	ret
     33a:	f6 2e       	mov	r15, r22
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     33c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     33e:	10 e0       	ldi	r17, 0x00	; 0
     340:	0f 5f       	subi	r16, 0xFF	; 255
     342:	1f 4f       	sbci	r17, 0xFF	; 255
     344:	0f 73       	andi	r16, 0x3F	; 63
     346:	11 27       	eor	r17, r17
     348:	e0 2e       	mov	r14, r16
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     34a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     34c:	8e 11       	cpse	r24, r14
     34e:	0c c0       	rjmp	.+24     	; 0x368 <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	07 fc       	sbrc	r0, 7
     354:	fa cf       	rjmp	.-12     	; 0x34a <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     356:	e8 89       	ldd	r30, Y+16	; 0x10
     358:	f9 89       	ldd	r31, Y+17	; 0x11
     35a:	80 81       	ld	r24, Z
     35c:	85 ff       	sbrs	r24, 5
     35e:	f5 cf       	rjmp	.-22     	; 0x34a <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     360:	ce 01       	movw	r24, r28
     362:	0e 94 54 01 	call	0x2a8	; 0x2a8 <HardwareSerial::_tx_udr_empty_irq()>
     366:	f1 cf       	rjmp	.-30     	; 0x34a <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     368:	eb 8d       	ldd	r30, Y+27	; 0x1b
     36a:	ec 0f       	add	r30, r28
     36c:	fd 2f       	mov	r31, r29
     36e:	f1 1d       	adc	r31, r1
     370:	e3 5a       	subi	r30, 0xA3	; 163
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	f0 82       	st	Z, r15
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     376:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\ilyav\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     378:	f8 94       	cli
write():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     37a:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     37c:	ea 89       	ldd	r30, Y+18	; 0x12
     37e:	fb 89       	ldd	r31, Y+19	; 0x13
     380:	80 81       	ld	r24, Z
     382:	80 62       	ori	r24, 0x20	; 32
     384:	cf cf       	rjmp	.-98     	; 0x324 <HardwareSerial::write(unsigned char)+0x38>

00000386 <HardwareSerial::flush()>:
flush():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	ec 01       	movw	r28, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     38c:	88 8d       	ldd	r24, Y+24	; 0x18
     38e:	88 23       	and	r24, r24
     390:	b9 f0       	breq	.+46     	; 0x3c0 <HardwareSerial::flush()+0x3a>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     392:	aa 89       	ldd	r26, Y+18	; 0x12
     394:	bb 89       	ldd	r27, Y+19	; 0x13
     396:	e8 89       	ldd	r30, Y+16	; 0x10
     398:	f9 89       	ldd	r31, Y+17	; 0x11
     39a:	8c 91       	ld	r24, X
     39c:	85 fd       	sbrc	r24, 5
     39e:	03 c0       	rjmp	.+6      	; 0x3a6 <HardwareSerial::flush()+0x20>
     3a0:	80 81       	ld	r24, Z
     3a2:	86 fd       	sbrc	r24, 6
     3a4:	0d c0       	rjmp	.+26     	; 0x3c0 <HardwareSerial::flush()+0x3a>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	07 fc       	sbrc	r0, 7
     3aa:	f7 cf       	rjmp	.-18     	; 0x39a <HardwareSerial::flush()+0x14>
     3ac:	8c 91       	ld	r24, X
     3ae:	85 ff       	sbrs	r24, 5
     3b0:	f2 cf       	rjmp	.-28     	; 0x396 <HardwareSerial::flush()+0x10>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     3b2:	80 81       	ld	r24, Z
     3b4:	85 ff       	sbrs	r24, 5
     3b6:	ed cf       	rjmp	.-38     	; 0x392 <HardwareSerial::flush()+0xc>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     3b8:	ce 01       	movw	r24, r28
     3ba:	0e 94 54 01 	call	0x2a8	; 0x2a8 <HardwareSerial::_tx_udr_empty_irq()>
     3be:	e9 cf       	rjmp	.-46     	; 0x392 <HardwareSerial::flush()+0xc>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <Print::write(char const*) [clone .part.2] [clone .constprop.14]>:
_ZN5Print5writeEPKc.part.2():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     3c6:	fc 01       	movw	r30, r24
     3c8:	01 90       	ld	r0, Z+
     3ca:	00 20       	and	r0, r0
     3cc:	e9 f7       	brne	.-6      	; 0x3c8 <Print::write(char const*) [clone .part.2] [clone .constprop.14]+0x2>
     3ce:	31 97       	sbiw	r30, 0x01	; 1
     3d0:	af 01       	movw	r20, r30
     3d2:	48 1b       	sub	r20, r24
     3d4:	59 0b       	sbc	r21, r25
     3d6:	bc 01       	movw	r22, r24
     3d8:	8d e6       	ldi	r24, 0x6D	; 109
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <Print::write(unsigned char const*, unsigned int)>

000003e0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]>:
printNumber():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     3e0:	8f 92       	push	r8
     3e2:	9f 92       	push	r9
     3e4:	af 92       	push	r10
     3e6:	bf 92       	push	r11
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	a1 97       	sbiw	r28, 0x21	; 33
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     400:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     402:	42 30       	cpi	r20, 0x02	; 2
     404:	08 f4       	brcc	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	4a e0       	ldi	r20, 0x0A	; 10
     408:	8e 01       	movw	r16, r28
     40a:	0f 5d       	subi	r16, 0xDF	; 223
     40c:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
     40e:	84 2e       	mov	r8, r20
     410:	91 2c       	mov	r9, r1
     412:	b1 2c       	mov	r11, r1
     414:	a1 2c       	mov	r10, r1
     416:	a5 01       	movw	r20, r10
     418:	94 01       	movw	r18, r8
     41a:	0e 94 93 08 	call	0x1126	; 0x1126 <__udivmodsi4>
     41e:	e6 2f       	mov	r30, r22
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
     420:	b9 01       	movw	r22, r18
     422:	ca 01       	movw	r24, r20
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     424:	ea 30       	cpi	r30, 0x0A	; 10
     426:	f4 f4       	brge	.+60     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     428:	e0 5d       	subi	r30, 0xD0	; 208
     42a:	d8 01       	movw	r26, r16
     42c:	ee 93       	st	-X, r30
     42e:	8d 01       	movw	r16, r26
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
     430:	23 2b       	or	r18, r19
     432:	24 2b       	or	r18, r20
     434:	25 2b       	or	r18, r21
     436:	79 f7       	brne	.-34     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
write():
     43c:	10 97       	sbiw	r26, 0x00	; 0
     43e:	19 f0       	breq	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     440:	cd 01       	movw	r24, r26
     442:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Print::write(char const*) [clone .part.2] [clone .constprop.14]>
printNumber():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
     446:	a1 96       	adiw	r28, 0x21	; 33
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	bf 90       	pop	r11
     45c:	af 90       	pop	r10
     45e:	9f 90       	pop	r9
     460:	8f 90       	pop	r8
     462:	08 95       	ret
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     464:	e9 5c       	subi	r30, 0xC9	; 201
     466:	e1 cf       	rjmp	.-62     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>

00000468 <Print::printFloat(double, unsigned char) [clone .constprop.5]>:
printFloat():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:252
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
     468:	4f 92       	push	r4
     46a:	5f 92       	push	r5
     46c:	6f 92       	push	r6
     46e:	7f 92       	push	r7
     470:	8f 92       	push	r8
     472:	9f 92       	push	r9
     474:	af 92       	push	r10
     476:	bf 92       	push	r11
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	6b 01       	movw	r12, r22
     488:	7c 01       	movw	r14, r24
     48a:	74 2e       	mov	r7, r20
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:256
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     48c:	ac 01       	movw	r20, r24
     48e:	9b 01       	movw	r18, r22
     490:	0e 94 8e 08 	call	0x111c	; 0x111c <__unordsf2>
     494:	88 23       	and	r24, r24
     496:	99 f0       	breq	.+38     	; 0x4be <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x56>
write():
     498:	86 e1       	ldi	r24, 0x16	; 22
     49a:	91 e0       	ldi	r25, 0x01	; 1
printFloat():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	ef 90       	pop	r14
     4a6:	df 90       	pop	r13
     4a8:	cf 90       	pop	r12
     4aa:	bf 90       	pop	r11
     4ac:	af 90       	pop	r10
     4ae:	9f 90       	pop	r9
     4b0:	8f 90       	pop	r8
     4b2:	7f 90       	pop	r7
     4b4:	6f 90       	pop	r6
     4b6:	5f 90       	pop	r5
     4b8:	4f 90       	pop	r4
write():
     4ba:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <Print::write(char const*) [clone .part.2] [clone .constprop.14]>
printFloat():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:257
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     4be:	46 01       	movw	r8, r12
     4c0:	57 01       	movw	r10, r14
     4c2:	e8 94       	clt
     4c4:	b7 f8       	bld	r11, 7
     4c6:	2f ef       	ldi	r18, 0xFF	; 255
     4c8:	3f ef       	ldi	r19, 0xFF	; 255
     4ca:	4f e7       	ldi	r20, 0x7F	; 127
     4cc:	5f e7       	ldi	r21, 0x7F	; 127
     4ce:	c5 01       	movw	r24, r10
     4d0:	b4 01       	movw	r22, r8
     4d2:	0e 94 8e 08 	call	0x111c	; 0x111c <__unordsf2>
     4d6:	81 11       	cpse	r24, r1
     4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x8c>
     4da:	2f ef       	ldi	r18, 0xFF	; 255
     4dc:	3f ef       	ldi	r19, 0xFF	; 255
     4de:	4f e7       	ldi	r20, 0x7F	; 127
     4e0:	5f e7       	ldi	r21, 0x7F	; 127
     4e2:	c5 01       	movw	r24, r10
     4e4:	b4 01       	movw	r22, r8
     4e6:	0e 94 c4 06 	call	0xd88	; 0xd88 <__cmpsf2>
     4ea:	18 16       	cp	r1, r24
     4ec:	1c f4       	brge	.+6      	; 0x4f4 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x8c>
write():
     4ee:	8a e1       	ldi	r24, 0x1A	; 26
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	d4 cf       	rjmp	.-88     	; 0x49c <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x34>
printFloat():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     4f4:	2f ef       	ldi	r18, 0xFF	; 255
     4f6:	3f ef       	ldi	r19, 0xFF	; 255
     4f8:	4f e7       	ldi	r20, 0x7F	; 127
     4fa:	5f e4       	ldi	r21, 0x4F	; 79
     4fc:	c7 01       	movw	r24, r14
     4fe:	b6 01       	movw	r22, r12
     500:	0e 94 1c 08 	call	0x1038	; 0x1038 <__gesf2>
     504:	18 16       	cp	r1, r24
     506:	1c f4       	brge	.+6      	; 0x50e <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xa6>
write():
     508:	8e e1       	ldi	r24, 0x1E	; 30
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	c7 cf       	rjmp	.-114    	; 0x49c <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x34>
printFloat():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:259
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     50e:	2f ef       	ldi	r18, 0xFF	; 255
     510:	3f ef       	ldi	r19, 0xFF	; 255
     512:	4f e7       	ldi	r20, 0x7F	; 127
     514:	5f ec       	ldi	r21, 0xCF	; 207
     516:	c7 01       	movw	r24, r14
     518:	b6 01       	movw	r22, r12
     51a:	0e 94 c4 06 	call	0xd88	; 0xd88 <__cmpsf2>
     51e:	87 fd       	sbrc	r24, 7
     520:	f3 cf       	rjmp	.-26     	; 0x508 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xa0>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	a9 01       	movw	r20, r18
     528:	c7 01       	movw	r24, r14
     52a:	b6 01       	movw	r22, r12
     52c:	0e 94 c4 06 	call	0xd88	; 0xd88 <__cmpsf2>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
     534:	87 ff       	sbrs	r24, 7
     536:	0a c0       	rjmp	.+20     	; 0x54c <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xe4>
print():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     538:	6d e2       	ldi	r22, 0x2D	; 45
     53a:	8d e6       	ldi	r24, 0x6D	; 109
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 76 01 	call	0x2ec	; 0x2ec <HardwareSerial::write(unsigned char)>
     542:	8c 01       	movw	r16, r24
printFloat():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:265
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
     544:	f7 fa       	bst	r15, 7
     546:	f0 94       	com	r15
     548:	f7 f8       	bld	r15, 7
     54a:	f0 94       	com	r15
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     54c:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
     556:	7c 16       	cp	r7, r28
     558:	41 f0       	breq	.+16     	; 0x56a <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x102>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	40 e2       	ldi	r20, 0x20	; 32
     560:	51 e4       	ldi	r21, 0x41	; 65
     562:	0e 94 c9 06 	call	0xd92	; 0xd92 <__divsf3>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     566:	cf 5f       	subi	r28, 0xFF	; 255
     568:	f6 cf       	rjmp	.-20     	; 0x556 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xee>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
     56a:	a7 01       	movw	r20, r14
     56c:	96 01       	movw	r18, r12
     56e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__addsf3>
     572:	2b 01       	movw	r4, r22
     574:	3c 01       	movw	r6, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     576:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fixunssfsi>
     57a:	4b 01       	movw	r8, r22
     57c:	5c 01       	movw	r10, r24
print():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     57e:	4a e0       	ldi	r20, 0x0A	; 10
     580:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]>
printFloat():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     584:	7c 01       	movw	r14, r24
     586:	e0 0e       	add	r14, r16
     588:	f1 1e       	adc	r15, r17
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     58a:	cc 23       	and	r28, r28
     58c:	c1 f1       	breq	.+112    	; 0x5fe <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x196>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     58e:	c5 01       	movw	r24, r10
     590:	b4 01       	movw	r22, r8
     592:	0e 94 6a 07 	call	0xed4	; 0xed4 <__floatunsisf>
     596:	9b 01       	movw	r18, r22
     598:	ac 01       	movw	r20, r24
     59a:	c3 01       	movw	r24, r6
     59c:	b2 01       	movw	r22, r4
     59e:	0e 94 57 06 	call	0xcae	; 0xcae <__subsf3>
     5a2:	4b 01       	movw	r8, r22
     5a4:	5c 01       	movw	r10, r24
print():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     5a6:	6e e2       	ldi	r22, 0x2E	; 46
     5a8:	8d e6       	ldi	r24, 0x6D	; 109
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 76 01 	call	0x2ec	; 0x2ec <HardwareSerial::write(unsigned char)>
printFloat():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:282
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     5b0:	e8 0e       	add	r14, r24
     5b2:	f9 1e       	adc	r15, r25
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     5b4:	c1 50       	subi	r28, 0x01	; 1
     5b6:	18 f1       	brcs	.+70     	; 0x5fe <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x196>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e2       	ldi	r20, 0x20	; 32
     5be:	51 e4       	ldi	r21, 0x41	; 65
     5c0:	c5 01       	movw	r24, r10
     5c2:	b4 01       	movw	r22, r8
     5c4:	0e 94 21 08 	call	0x1042	; 0x1042 <__mulsf3>
     5c8:	2b 01       	movw	r4, r22
     5ca:	3c 01       	movw	r6, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
     5cc:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fixunssfsi>
print():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
     5d0:	4b 01       	movw	r8, r22
     5d2:	b1 2c       	mov	r11, r1
     5d4:	a1 2c       	mov	r10, r1
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     5d6:	4a e0       	ldi	r20, 0x0A	; 10
     5d8:	c5 01       	movw	r24, r10
     5da:	b4 01       	movw	r22, r8
     5dc:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.10]>
printFloat():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:290
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
     5e0:	e8 0e       	add	r14, r24
     5e2:	f9 1e       	adc	r15, r25
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
     5e4:	c5 01       	movw	r24, r10
     5e6:	b4 01       	movw	r22, r8
     5e8:	0e 94 6a 07 	call	0xed4	; 0xed4 <__floatunsisf>
     5ec:	9b 01       	movw	r18, r22
     5ee:	ac 01       	movw	r20, r24
     5f0:	c3 01       	movw	r24, r6
     5f2:	b2 01       	movw	r22, r4
     5f4:	0e 94 57 06 	call	0xcae	; 0xcae <__subsf3>
     5f8:	4b 01       	movw	r8, r22
     5fa:	5c 01       	movw	r10, r24
     5fc:	db cf       	rjmp	.-74     	; 0x5b4 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x14c>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
     5fe:	c7 01       	movw	r24, r14
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	cf 90       	pop	r12
     60e:	bf 90       	pop	r11
     610:	af 90       	pop	r10
     612:	9f 90       	pop	r9
     614:	8f 90       	pop	r8
     616:	7f 90       	pop	r7
     618:	6f 90       	pop	r6
     61a:	5f 90       	pop	r5
     61c:	4f 90       	pop	r4
     61e:	08 95       	ret

00000620 <__vector_16>:
__vector_16():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     620:	1f 92       	push	r1
     622:	0f 92       	push	r0
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	0f 92       	push	r0
     628:	11 24       	eor	r1, r1
     62a:	2f 93       	push	r18
     62c:	3f 93       	push	r19
     62e:	8f 93       	push	r24
     630:	9f 93       	push	r25
     632:	af 93       	push	r26
     634:	bf 93       	push	r27
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     636:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <timer0_millis>
     63a:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <timer0_millis+0x1>
     63e:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <timer0_millis+0x2>
     642:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <timer0_millis+0x3>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     646:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <timer0_fract>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     64a:	23 e0       	ldi	r18, 0x03	; 3
     64c:	23 0f       	add	r18, r19
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     64e:	2d 37       	cpi	r18, 0x7D	; 125
     650:	68 f1       	brcs	.+90     	; 0x6ac <__vector_16+0x8c>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     652:	26 e8       	ldi	r18, 0x86	; 134
     654:	23 0f       	add	r18, r19
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     656:	02 96       	adiw	r24, 0x02	; 2
     658:	a1 1d       	adc	r26, r1
     65a:	b1 1d       	adc	r27, r1
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     65c:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <timer0_fract>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     660:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <timer0_millis>
     664:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <timer0_millis+0x1>
     668:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <timer0_millis+0x2>
     66c:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <timer0_millis+0x3>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     670:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <timer0_overflow_count>
     674:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <timer0_overflow_count+0x1>
     678:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <timer0_overflow_count+0x2>
     67c:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <timer0_overflow_count+0x3>
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	a1 1d       	adc	r26, r1
     684:	b1 1d       	adc	r27, r1
     686:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <timer0_overflow_count>
     68a:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <timer0_overflow_count+0x1>
     68e:	a0 93 6b 01 	sts	0x016B, r26	; 0x80016b <timer0_overflow_count+0x2>
     692:	b0 93 6c 01 	sts	0x016C, r27	; 0x80016c <timer0_overflow_count+0x3>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     696:	bf 91       	pop	r27
     698:	af 91       	pop	r26
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	3f 91       	pop	r19
     6a0:	2f 91       	pop	r18
     6a2:	0f 90       	pop	r0
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	0f 90       	pop	r0
     6a8:	1f 90       	pop	r1
     6aa:	18 95       	reti
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	a1 1d       	adc	r26, r1
     6b0:	b1 1d       	adc	r27, r1
     6b2:	d4 cf       	rjmp	.-88     	; 0x65c <__vector_16+0x3c>

000006b4 <__vector_19>:
__vector_19():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	2f 93       	push	r18
     6c0:	3f 93       	push	r19
     6c2:	4f 93       	push	r20
     6c4:	5f 93       	push	r21
     6c6:	6f 93       	push	r22
     6c8:	7f 93       	push	r23
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	af 93       	push	r26
     6d0:	bf 93       	push	r27
     6d2:	ef 93       	push	r30
     6d4:	ff 93       	push	r31
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     6d6:	8d e6       	ldi	r24, 0x6D	; 109
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 54 01 	call	0x2a8	; 0x2a8 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     6de:	ff 91       	pop	r31
     6e0:	ef 91       	pop	r30
     6e2:	bf 91       	pop	r27
     6e4:	af 91       	pop	r26
     6e6:	9f 91       	pop	r25
     6e8:	8f 91       	pop	r24
     6ea:	7f 91       	pop	r23
     6ec:	6f 91       	pop	r22
     6ee:	5f 91       	pop	r21
     6f0:	4f 91       	pop	r20
     6f2:	3f 91       	pop	r19
     6f4:	2f 91       	pop	r18
     6f6:	0f 90       	pop	r0
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	0f 90       	pop	r0
     6fc:	1f 90       	pop	r1
     6fe:	18 95       	reti

00000700 <__vector_18>:
__vector_18():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     700:	1f 92       	push	r1
     702:	0f 92       	push	r0
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	0f 92       	push	r0
     708:	11 24       	eor	r1, r1
     70a:	2f 93       	push	r18
     70c:	8f 93       	push	r24
     70e:	9f 93       	push	r25
     710:	ef 93       	push	r30
     712:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     714:	e0 91 7d 01 	lds	r30, 0x017D	; 0x80017d <Serial+0x10>
     718:	f0 91 7e 01 	lds	r31, 0x017E	; 0x80017e <Serial+0x11>
     71c:	80 81       	ld	r24, Z
     71e:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <Serial+0x16>
     722:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <Serial+0x17>
     726:	82 fd       	sbrc	r24, 2
     728:	1b c0       	rjmp	.+54     	; 0x760 <__vector_18+0x60>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     72a:	90 81       	ld	r25, Z
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     72c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Serial+0x19>
     730:	8f 5f       	subi	r24, 0xFF	; 255
     732:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     734:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <Serial+0x1a>
     738:	82 17       	cp	r24, r18
     73a:	41 f0       	breq	.+16     	; 0x74c <__vector_18+0x4c>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     73c:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <Serial+0x19>
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	e3 59       	subi	r30, 0x93	; 147
     744:	fe 4f       	sbci	r31, 0xFE	; 254
     746:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     748:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Serial+0x19>
__vector_18():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     74c:	ff 91       	pop	r31
     74e:	ef 91       	pop	r30
     750:	9f 91       	pop	r25
     752:	8f 91       	pop	r24
     754:	2f 91       	pop	r18
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti
_rx_complete_irq():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     760:	80 81       	ld	r24, Z
     762:	f4 cf       	rjmp	.-24     	; 0x74c <__vector_18+0x4c>

00000764 <main>:
main():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	00 d0       	rcall	.+0      	; 0x76a <main+0x6>
     76a:	00 d0       	rcall	.+0      	; 0x76c <main+0x8>
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
init():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     770:	78 94       	sei
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
     772:	84 b5       	in	r24, 0x24	; 36
     774:	83 60       	ori	r24, 0x03	; 3
     776:	84 bd       	out	0x24, r24	; 36
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
     778:	85 b5       	in	r24, 0x25	; 37
     77a:	83 60       	ori	r24, 0x03	; 3
     77c:	85 bd       	out	0x25, r24	; 37
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
     77e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     782:	81 60       	ori	r24, 0x01	; 1
     784:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     788:	22 e0       	ldi	r18, 0x02	; 2
     78a:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     78e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     792:	81 60       	ori	r24, 0x01	; 1
     794:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     798:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     79c:	81 60       	ori	r24, 0x01	; 1
     79e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
     7a2:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     7a6:	84 60       	ori	r24, 0x04	; 4
     7a8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
     7ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     7b0:	81 60       	ori	r24, 0x01	; 1
     7b2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
     7b6:	87 e8       	ldi	r24, 0x87	; 135
     7b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
     7bc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
setup():
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:34
#define kP 0.03  // Slightly increased proportional gain
#define kI 0.05  // Increased integral gain to push the duty cycle higher
#define kD 0.0

void setup() {
  pinMode(PWMOUT_PIN, OUTPUT);
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	8a e0       	ldi	r24, 0x0A	; 10
     7c4:	0e 94 80 00 	call	0x100	; 0x100 <pinMode>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:35
  pinMode(BATTERY_PIN, INPUT);
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	8f e0       	ldi	r24, 0x0F	; 15
     7cc:	0e 94 80 00 	call	0x100	; 0x100 <pinMode>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:36
  pinMode(VINREG_PIN, INPUT);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	8e e0       	ldi	r24, 0x0E	; 14
     7d4:	0e 94 80 00 	call	0x100	; 0x100 <pinMode>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:38

  noInterrupts();
     7d8:	f8 94       	cli
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:40

  TCCR1A = (1 << COM1B1) | (1 << WGM11); 
     7da:	82 e2       	ldi	r24, 0x22	; 34
     7dc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:41
  TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10);
     7e0:	89 e1       	ldi	r24, 0x19	; 25
     7e2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:43

  ICR1 = 160;  
     7e6:	80 ea       	ldi	r24, 0xA0	; 160
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     7ee:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:44
  OCR1B = (uint16_t)(IDEAL_DUTY_CYCLE * ICR1);  
     7f2:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
     7f6:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	0e 94 6a 07 	call	0xed4	; 0xed4 <__floatunsisf>
     802:	2a e9       	ldi	r18, 0x9A	; 154
     804:	39 e9       	ldi	r19, 0x99	; 153
     806:	49 e1       	ldi	r20, 0x19	; 25
     808:	5f e3       	ldi	r21, 0x3F	; 63
     80a:	0e 94 21 08 	call	0x1042	; 0x1042 <__mulsf3>
     80e:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fixunssfsi>
     812:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     816:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:46

  interrupts();
     81a:	78 94       	sei
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:48

  lastTime = micros();
     81c:	0e 94 b1 00 	call	0x162	; 0x162 <micros>
     820:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <lastTime>
     824:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <lastTime+0x1>
     828:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <lastTime+0x2>
     82c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <lastTime+0x3>
millis():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     830:	2f b7       	in	r18, 0x3f	; 63
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     832:	f8 94       	cli
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     834:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <timer0_millis>
     838:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <timer0_millis+0x1>
     83c:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <timer0_millis+0x2>
     840:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <timer0_millis+0x3>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     844:	2f bf       	out	0x3f, r18	; 63
setup():
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:49
  lastVoltageReadTime = millis();
     846:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <lastVoltageReadTime>
     84a:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <lastVoltageReadTime+0x1>
     84e:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <lastVoltageReadTime+0x2>
     852:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <lastVoltageReadTime+0x3>
millis():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     856:	2f b7       	in	r18, 0x3f	; 63
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     858:	f8 94       	cli
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     85a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <timer0_millis>
     85e:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <timer0_millis+0x1>
     862:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <timer0_millis+0x2>
     866:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <timer0_millis+0x3>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     86a:	2f bf       	out	0x3f, r18	; 63
setup():
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:50
  lastPIDTime = millis();
     86c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <lastPIDTime>
     870:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <lastPIDTime+0x1>
     874:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <lastPIDTime+0x2>
     878:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <lastPIDTime+0x3>
begin():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     87c:	e0 91 7d 01 	lds	r30, 0x017D	; 0x80017d <Serial+0x10>
     880:	f0 91 7e 01 	lds	r31, 0x017E	; 0x80017e <Serial+0x11>
     884:	32 e0       	ldi	r19, 0x02	; 2
     886:	30 83       	st	Z, r19
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     888:	e0 91 79 01 	lds	r30, 0x0179	; 0x800179 <Serial+0xc>
     88c:	f0 91 7a 01 	lds	r31, 0x017A	; 0x80017a <Serial+0xd>
     890:	10 82       	st	Z, r1
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     892:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <Serial+0xe>
     896:	f0 91 7c 01 	lds	r31, 0x017C	; 0x80017c <Serial+0xf>
     89a:	8f ec       	ldi	r24, 0xCF	; 207
     89c:	80 83       	st	Z, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     89e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <Serial+0x18>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     8a2:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <Serial+0x14>
     8a6:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <Serial+0x15>
     8aa:	86 e0       	ldi	r24, 0x06	; 6
     8ac:	80 83       	st	Z, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     8ae:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <Serial+0x12>
     8b2:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <Serial+0x13>
     8b6:	80 81       	ld	r24, Z
     8b8:	88 69       	ori	r24, 0x98	; 152
     8ba:	80 83       	st	Z, r24
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     8bc:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <Serial+0x12>
     8c0:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <Serial+0x13>
     8c4:	80 81       	ld	r24, Z
     8c6:	8f 7d       	andi	r24, 0xDF	; 223
     8c8:	80 83       	st	Z, r24
analogRead():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     8ca:	00 e4       	ldi	r16, 0x40	; 64
     8cc:	11 e4       	ldi	r17, 0x41	; 65
loop():
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:55
  Serial.begin(9600);
}

void loop() {
  unsigned long currentTime = micros();
     8ce:	0e 94 b1 00 	call	0x162	; 0x162 <micros>
     8d2:	4b 01       	movw	r8, r22
     8d4:	5c 01       	movw	r10, r24
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:57

  OCR1B = (uint16_t)(dutyCycle * ICR1);
     8d6:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
     8da:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0e 94 6a 07 	call	0xed4	; 0xed4 <__floatunsisf>
     8e6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     8ea:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     8ee:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     8f2:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
     8f6:	0e 94 21 08 	call	0x1042	; 0x1042 <__mulsf3>
     8fa:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fixunssfsi>
     8fe:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     902:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:59

  if (currentTime - lastVoltageReadTime >= 10) {
     906:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <lastVoltageReadTime>
     90a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <lastVoltageReadTime+0x1>
     90e:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <lastVoltageReadTime+0x2>
     912:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <lastVoltageReadTime+0x3>
     916:	a5 01       	movw	r20, r10
     918:	94 01       	movw	r18, r8
     91a:	28 1b       	sub	r18, r24
     91c:	39 0b       	sbc	r19, r25
     91e:	4a 0b       	sbc	r20, r26
     920:	5b 0b       	sbc	r21, r27
     922:	da 01       	movw	r26, r20
     924:	c9 01       	movw	r24, r18
     926:	0a 97       	sbiw	r24, 0x0a	; 10
     928:	a1 05       	cpc	r26, r1
     92a:	b1 05       	cpc	r27, r1
     92c:	08 f4       	brcc	.+2      	; 0x930 <__stack+0x31>
     92e:	5a c0       	rjmp	.+180    	; 0x9e4 <__stack+0xe5>
analogRead():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
     930:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     934:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     938:	80 64       	ori	r24, 0x40	; 64
     93a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
     93e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     942:	86 fd       	sbrc	r24, 6
     944:	fc cf       	rjmp	.-8      	; 0x93e <__stack+0x3f>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
     946:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     94a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
loop():
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:60
    outVoltage = ((float)analogRead(VINREG_PIN) * DIVIDER_CONSTANT) / 203.0;
     94e:	07 2e       	mov	r0, r23
     950:	00 0c       	add	r0, r0
     952:	88 0b       	sbc	r24, r24
     954:	99 0b       	sbc	r25, r25
     956:	0e 94 6c 07 	call	0xed8	; 0xed8 <__floatsisf>
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e3       	ldi	r20, 0x30	; 48
     960:	51 e4       	ldi	r21, 0x41	; 65
     962:	0e 94 21 08 	call	0x1042	; 0x1042 <__mulsf3>
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	4b e4       	ldi	r20, 0x4B	; 75
     96c:	53 e4       	ldi	r21, 0x43	; 67
     96e:	0e 94 c9 06 	call	0xd92	; 0xd92 <__divsf3>
     972:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <outVoltage>
     976:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <outVoltage+0x1>
     97a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <outVoltage+0x2>
     97e:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <outVoltage+0x3>
analogRead():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     982:	10 93 7c 00 	sts	0x007C, r17	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     986:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     98a:	80 64       	ori	r24, 0x40	; 64
     98c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
     990:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     994:	86 fd       	sbrc	r24, 6
     996:	fc cf       	rjmp	.-8      	; 0x990 <__stack+0x91>
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
     998:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     99c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
loop():
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:61
    batteryVoltage = ((float)analogRead(BATTERY_PIN) * DIVIDER_CONSTANT) / 203.0;
     9a0:	07 2e       	mov	r0, r23
     9a2:	00 0c       	add	r0, r0
     9a4:	88 0b       	sbc	r24, r24
     9a6:	99 0b       	sbc	r25, r25
     9a8:	0e 94 6c 07 	call	0xed8	; 0xed8 <__floatsisf>
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	40 e3       	ldi	r20, 0x30	; 48
     9b2:	51 e4       	ldi	r21, 0x41	; 65
     9b4:	0e 94 21 08 	call	0x1042	; 0x1042 <__mulsf3>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	4b e4       	ldi	r20, 0x4B	; 75
     9be:	53 e4       	ldi	r21, 0x43	; 67
     9c0:	0e 94 c9 06 	call	0xd92	; 0xd92 <__divsf3>
     9c4:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <batteryVoltage>
     9c8:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <batteryVoltage+0x1>
     9cc:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <batteryVoltage+0x2>
     9d0:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <batteryVoltage+0x3>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:62
    lastVoltageReadTime = currentTime;
     9d4:	80 92 60 01 	sts	0x0160, r8	; 0x800160 <lastVoltageReadTime>
     9d8:	90 92 61 01 	sts	0x0161, r9	; 0x800161 <lastVoltageReadTime+0x1>
     9dc:	a0 92 62 01 	sts	0x0162, r10	; 0x800162 <lastVoltageReadTime+0x2>
     9e0:	b0 92 63 01 	sts	0x0163, r11	; 0x800163 <lastVoltageReadTime+0x3>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:65
  }

  if (currentTime - lastPIDTime >= 10) {
     9e4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <lastPIDTime>
     9e8:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <lastPIDTime+0x1>
     9ec:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <lastPIDTime+0x2>
     9f0:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <lastPIDTime+0x3>
     9f4:	a5 01       	movw	r20, r10
     9f6:	94 01       	movw	r18, r8
     9f8:	28 1b       	sub	r18, r24
     9fa:	39 0b       	sbc	r19, r25
     9fc:	4a 0b       	sbc	r20, r26
     9fe:	5b 0b       	sbc	r21, r27
     a00:	da 01       	movw	r26, r20
     a02:	c9 01       	movw	r24, r18
     a04:	0a 97       	sbiw	r24, 0x0a	; 10
     a06:	a1 05       	cpc	r26, r1
     a08:	b1 05       	cpc	r27, r1
     a0a:	08 f4       	brcc	.+2      	; 0xa0e <__stack+0x10f>
     a0c:	09 c1       	rjmp	.+530    	; 0xc20 <__stack+0x321>
adjustPID():
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:72
    lastPIDTime = currentTime;
  }
}

void adjustPID() {
  unsigned long currentMicros = micros();
     a0e:	0e 94 b1 00 	call	0x162	; 0x162 <micros>
     a12:	6b 01       	movw	r12, r22
     a14:	7c 01       	movw	r14, r24
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:73
  dt = (currentMicros - lastTime) / 1000000.0;
     a16:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lastTime>
     a1a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <lastTime+0x1>
     a1e:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <lastTime+0x2>
     a22:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <lastTime+0x3>
     a26:	a7 01       	movw	r20, r14
     a28:	96 01       	movw	r18, r12
     a2a:	28 1b       	sub	r18, r24
     a2c:	39 0b       	sbc	r19, r25
     a2e:	4a 0b       	sbc	r20, r26
     a30:	5b 0b       	sbc	r21, r27
     a32:	ca 01       	movw	r24, r20
     a34:	b9 01       	movw	r22, r18
     a36:	0e 94 6a 07 	call	0xed4	; 0xed4 <__floatunsisf>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	34 e2       	ldi	r19, 0x24	; 36
     a3e:	44 e7       	ldi	r20, 0x74	; 116
     a40:	59 e4       	ldi	r21, 0x49	; 73
     a42:	0e 94 c9 06 	call	0xd92	; 0xd92 <__divsf3>
     a46:	2b 01       	movw	r4, r22
     a48:	3c 01       	movw	r6, r24
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:74
  lastTime = currentMicros;
     a4a:	c0 92 50 01 	sts	0x0150, r12	; 0x800150 <lastTime>
     a4e:	d0 92 51 01 	sts	0x0151, r13	; 0x800151 <lastTime+0x1>
     a52:	e0 92 52 01 	sts	0x0152, r14	; 0x800152 <lastTime+0x2>
     a56:	f0 92 53 01 	sts	0x0153, r15	; 0x800153 <lastTime+0x3>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:76

  error = batteryVoltage + 1.0 - outVoltage;
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e8       	ldi	r20, 0x80	; 128
     a60:	5f e3       	ldi	r21, 0x3F	; 63
     a62:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <batteryVoltage>
     a66:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <batteryVoltage+0x1>
     a6a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <batteryVoltage+0x2>
     a6e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <batteryVoltage+0x3>
     a72:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__addsf3>
     a76:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <outVoltage>
     a7a:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <outVoltage+0x1>
     a7e:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <outVoltage+0x2>
     a82:	50 91 5f 01 	lds	r21, 0x015F	; 0x80015f <outVoltage+0x3>
     a86:	0e 94 57 06 	call	0xcae	; 0xcae <__subsf3>
     a8a:	6b 01       	movw	r12, r22
     a8c:	7c 01       	movw	r14, r24
     a8e:	c0 92 4c 01 	sts	0x014C, r12	; 0x80014c <error>
     a92:	d0 92 4d 01 	sts	0x014D, r13	; 0x80014d <error+0x1>
     a96:	e0 92 4e 01 	sts	0x014E, r14	; 0x80014e <error+0x2>
     a9a:	f0 92 4f 01 	sts	0x014F, r15	; 0x80014f <error+0x3>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:78

  integral += error * dt;  // Accumulate integral without clamping
     a9e:	ac 01       	movw	r20, r24
     aa0:	9b 01       	movw	r18, r22
     aa2:	c3 01       	movw	r24, r6
     aa4:	b2 01       	movw	r22, r4
     aa6:	0e 94 21 08 	call	0x1042	; 0x1042 <__mulsf3>
     aaa:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <integral>
     aae:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <integral+0x1>
     ab2:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <integral+0x2>
     ab6:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <integral+0x3>
     aba:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__addsf3>
     abe:	69 83       	std	Y+1, r22	; 0x01
     ac0:	7a 83       	std	Y+2, r23	; 0x02
     ac2:	8b 83       	std	Y+3, r24	; 0x03
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <integral>
     aca:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <integral+0x1>
     ace:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <integral+0x2>
     ad2:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <integral+0x3>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:79
  derivative = (error - previousError) / dt;
     ad6:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__data_end>
     ada:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__data_end+0x1>
     ade:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <__data_end+0x2>
     ae2:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <__data_end+0x3>
     ae6:	c7 01       	movw	r24, r14
     ae8:	b6 01       	movw	r22, r12
     aea:	0e 94 57 06 	call	0xcae	; 0xcae <__subsf3>
     aee:	a3 01       	movw	r20, r6
     af0:	92 01       	movw	r18, r4
     af2:	0e 94 c9 06 	call	0xd92	; 0xd92 <__divsf3>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:81

  dutyCycle = IDEAL_DUTY_CYCLE + (kP * error) + (kI * integral) + (kD * derivative);
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	a9 01       	movw	r20, r18
     afc:	0e 94 21 08 	call	0x1042	; 0x1042 <__mulsf3>
     b00:	2b 01       	movw	r4, r22
     b02:	3c 01       	movw	r6, r24
     b04:	2f e8       	ldi	r18, 0x8F	; 143
     b06:	32 ec       	ldi	r19, 0xC2	; 194
     b08:	45 ef       	ldi	r20, 0xF5	; 245
     b0a:	5c e3       	ldi	r21, 0x3C	; 60
     b0c:	c7 01       	movw	r24, r14
     b0e:	b6 01       	movw	r22, r12
     b10:	0e 94 21 08 	call	0x1042	; 0x1042 <__mulsf3>
     b14:	2a e9       	ldi	r18, 0x9A	; 154
     b16:	39 e9       	ldi	r19, 0x99	; 153
     b18:	49 e1       	ldi	r20, 0x19	; 25
     b1a:	5f e3       	ldi	r21, 0x3F	; 63
     b1c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__addsf3>
     b20:	6b 01       	movw	r12, r22
     b22:	7c 01       	movw	r14, r24
     b24:	2d ec       	ldi	r18, 0xCD	; 205
     b26:	3c ec       	ldi	r19, 0xCC	; 204
     b28:	4c e4       	ldi	r20, 0x4C	; 76
     b2a:	5d e3       	ldi	r21, 0x3D	; 61
     b2c:	69 81       	ldd	r22, Y+1	; 0x01
     b2e:	7a 81       	ldd	r23, Y+2	; 0x02
     b30:	8b 81       	ldd	r24, Y+3	; 0x03
     b32:	9c 81       	ldd	r25, Y+4	; 0x04
     b34:	0e 94 21 08 	call	0x1042	; 0x1042 <__mulsf3>
     b38:	9b 01       	movw	r18, r22
     b3a:	ac 01       	movw	r20, r24
     b3c:	c7 01       	movw	r24, r14
     b3e:	b6 01       	movw	r22, r12
     b40:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__addsf3>
     b44:	9b 01       	movw	r18, r22
     b46:	ac 01       	movw	r20, r24
     b48:	c3 01       	movw	r24, r6
     b4a:	b2 01       	movw	r22, r4
     b4c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__addsf3>
     b50:	6b 01       	movw	r12, r22
     b52:	7c 01       	movw	r14, r24
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:84

  // Clamp the duty cycle between 0 and 1
  if (dutyCycle > 1) dutyCycle = 1;
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e8       	ldi	r20, 0x80	; 128
     b5a:	5f e3       	ldi	r21, 0x3F	; 63
     b5c:	0e 94 1c 08 	call	0x1038	; 0x1038 <__gesf2>
     b60:	18 16       	cp	r1, r24
     b62:	0c f4       	brge	.+2      	; 0xb66 <__stack+0x267>
     b64:	6a c0       	rjmp	.+212    	; 0xc3a <__stack+0x33b>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:81
  error = batteryVoltage + 1.0 - outVoltage;

  integral += error * dt;  // Accumulate integral without clamping
  derivative = (error - previousError) / dt;

  dutyCycle = IDEAL_DUTY_CYCLE + (kP * error) + (kI * integral) + (kD * derivative);
     b66:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
     b6a:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
     b6e:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
     b72:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:85

  // Clamp the duty cycle between 0 and 1
  if (dutyCycle > 1) dutyCycle = 1;
  if (dutyCycle < 0) dutyCycle = 0;
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	a9 01       	movw	r20, r18
     b7c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     b80:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     b84:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     b88:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     b8c:	0e 94 c4 06 	call	0xd88	; 0xd88 <__cmpsf2>
     b90:	87 ff       	sbrs	r24, 7
     b92:	08 c0       	rjmp	.+16     	; 0xba4 <__stack+0x2a5>
     b94:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     b98:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     b9c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_start+0x2>
     ba0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_start+0x3>
write():
     ba4:	82 e2       	ldi	r24, 0x22	; 34
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Print::write(char const*) [clone .part.2] [clone .constprop.14]>
print():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     bac:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     bb0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     bb4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     bb8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     bbc:	42 e0       	ldi	r20, 0x02	; 2
     bbe:	0e 94 34 02 	call	0x468	; 0x468 <Print::printFloat(double, unsigned char) [clone .constprop.5]>
write():
     bc2:	8f e2       	ldi	r24, 0x2F	; 47
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Print::write(char const*) [clone .part.2] [clone .constprop.14]>
     bca:	82 e3       	ldi	r24, 0x32	; 50
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Print::write(char const*) [clone .part.2] [clone .constprop.14]>
print():
     bd2:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <outVoltage>
     bd6:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <outVoltage+0x1>
     bda:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <outVoltage+0x2>
     bde:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <outVoltage+0x3>
     be2:	42 e0       	ldi	r20, 0x02	; 2
     be4:	0e 94 34 02 	call	0x468	; 0x468 <Print::printFloat(double, unsigned char) [clone .constprop.5]>
write():
     be8:	8f e2       	ldi	r24, 0x2F	; 47
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Print::write(char const*) [clone .part.2] [clone .constprop.14]>
adjustPID():
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:93
  Serial.print("Duty Cycle: ");
  Serial.println(dutyCycle);
  Serial.print("Output Voltage: ");
  Serial.println(outVoltage);

  previousError = error;
     bf0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <error>
     bf4:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <error+0x1>
     bf8:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <error+0x2>
     bfc:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <error+0x3>
     c00:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
     c04:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
     c08:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <__data_end+0x2>
     c0c:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <__data_end+0x3>
loop():
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:67
    lastVoltageReadTime = currentTime;
  }

  if (currentTime - lastPIDTime >= 10) {
    adjustPID();
    lastPIDTime = currentTime;
     c10:	80 92 54 01 	sts	0x0154, r8	; 0x800154 <lastPIDTime>
     c14:	90 92 55 01 	sts	0x0155, r9	; 0x800155 <lastPIDTime+0x1>
     c18:	a0 92 56 01 	sts	0x0156, r10	; 0x800156 <lastPIDTime+0x2>
     c1c:	b0 92 57 01 	sts	0x0157, r11	; 0x800157 <lastPIDTime+0x3>
serialEventRun():
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	45 2b       	or	r20, r21
     c26:	09 f4       	brne	.+2      	; 0xc2a <__stack+0x32b>
     c28:	52 ce       	rjmp	.-860    	; 0x8ce <main+0x16a>
     c2a:	0e 94 40 01 	call	0x280	; 0x280 <Serial0_available()>
     c2e:	88 23       	and	r24, r24
     c30:	09 f4       	brne	.+2      	; 0xc34 <__stack+0x335>
     c32:	4d ce       	rjmp	.-870    	; 0x8ce <main+0x16a>
     c34:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     c38:	4a ce       	rjmp	.-876    	; 0x8ce <main+0x16a>
adjustPID():
C:\Users\ilyav\source\repos\IDP2024F\IDP_2024F\IDP2024F\IDP2024F_10.28.2024/IDP2024F_10.28.2024.ino:84
  derivative = (error - previousError) / dt;

  dutyCycle = IDEAL_DUTY_CYCLE + (kP * error) + (kI * integral) + (kD * derivative);

  // Clamp the duty cycle between 0 and 1
  if (dutyCycle > 1) dutyCycle = 1;
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	a0 e8       	ldi	r26, 0x80	; 128
     c40:	bf e3       	ldi	r27, 0x3F	; 63
     c42:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     c46:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     c4a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     c4e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     c52:	91 cf       	rjmp	.-222    	; 0xb76 <__stack+0x277>

00000c54 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC2Ev():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c54:	ed e6       	ldi	r30, 0x6D	; 109
     c56:	f1 e0       	ldi	r31, 0x01	; 1
     c58:	13 82       	std	Z+3, r1	; 0x03
     c5a:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC2Ev():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     c5c:	88 ee       	ldi	r24, 0xE8	; 232
     c5e:	93 e0       	ldi	r25, 0x03	; 3
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	84 83       	std	Z+4, r24	; 0x04
     c66:	95 83       	std	Z+5, r25	; 0x05
     c68:	a6 83       	std	Z+6, r26	; 0x06
     c6a:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC2EPVhS1_S1_S1_S1_S1_():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	91 83       	std	Z+1, r25	; 0x01
     c72:	80 83       	st	Z, r24
     c74:	85 ec       	ldi	r24, 0xC5	; 197
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	95 87       	std	Z+13, r25	; 0x0d
     c7a:	84 87       	std	Z+12, r24	; 0x0c
     c7c:	84 ec       	ldi	r24, 0xC4	; 196
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	97 87       	std	Z+15, r25	; 0x0f
     c82:	86 87       	std	Z+14, r24	; 0x0e
     c84:	80 ec       	ldi	r24, 0xC0	; 192
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	91 8b       	std	Z+17, r25	; 0x11
     c8a:	80 8b       	std	Z+16, r24	; 0x10
     c8c:	81 ec       	ldi	r24, 0xC1	; 193
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	93 8b       	std	Z+19, r25	; 0x13
     c92:	82 8b       	std	Z+18, r24	; 0x12
     c94:	82 ec       	ldi	r24, 0xC2	; 194
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	95 8b       	std	Z+21, r25	; 0x15
     c9a:	84 8b       	std	Z+20, r24	; 0x14
     c9c:	86 ec       	ldi	r24, 0xC6	; 198
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	97 8b       	std	Z+23, r25	; 0x17
     ca2:	86 8b       	std	Z+22, r24	; 0x16
     ca4:	11 8e       	std	Z+25, r1	; 0x19
     ca6:	12 8e       	std	Z+26, r1	; 0x1a
     ca8:	13 8e       	std	Z+27, r1	; 0x1b
     caa:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\ilyav\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     cac:	08 95       	ret

00000cae <__subsf3>:
__subsf3():
     cae:	50 58       	subi	r21, 0x80	; 128

00000cb0 <__addsf3>:
     cb0:	bb 27       	eor	r27, r27
     cb2:	aa 27       	eor	r26, r26
     cb4:	0e 94 6f 06 	call	0xcde	; 0xcde <__addsf3x>
     cb8:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_round>
__addsf3():
     cbc:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__fp_pscA>
     cc0:	38 f0       	brcs	.+14     	; 0xcd0 <__addsf3+0x20>
     cc2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__fp_pscB>
     cc6:	20 f0       	brcs	.+8      	; 0xcd0 <__addsf3+0x20>
     cc8:	39 f4       	brne	.+14     	; 0xcd8 <__addsf3+0x28>
     cca:	9f 3f       	cpi	r25, 0xFF	; 255
     ccc:	19 f4       	brne	.+6      	; 0xcd4 <__addsf3+0x24>
     cce:	26 f4       	brtc	.+8      	; 0xcd8 <__addsf3+0x28>
     cd0:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_nan>
     cd4:	0e f4       	brtc	.+2      	; 0xcd8 <__addsf3+0x28>
     cd6:	e0 95       	com	r30
     cd8:	e7 fb       	bst	r30, 7
     cda:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__fp_inf>

00000cde <__addsf3x>:
__addsf3x():
     cde:	e9 2f       	mov	r30, r25
     ce0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__fp_split3>
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__addsf3+0xc>
     ce6:	ba 17       	cp	r27, r26
     ce8:	62 07       	cpc	r22, r18
     cea:	73 07       	cpc	r23, r19
     cec:	84 07       	cpc	r24, r20
     cee:	95 07       	cpc	r25, r21
     cf0:	20 f0       	brcs	.+8      	; 0xcfa <__addsf3x+0x1c>
     cf2:	79 f4       	brne	.+30     	; 0xd12 <__addsf3x+0x34>
     cf4:	a6 f5       	brtc	.+104    	; 0xd5e <__addsf3x+0x80>
     cf6:	0c 94 15 08 	jmp	0x102a	; 0x102a <__fp_zero>
     cfa:	0e f4       	brtc	.+2      	; 0xcfe <__addsf3x+0x20>
     cfc:	e0 95       	com	r30
     cfe:	0b 2e       	mov	r0, r27
     d00:	ba 2f       	mov	r27, r26
     d02:	a0 2d       	mov	r26, r0
     d04:	0b 01       	movw	r0, r22
     d06:	b9 01       	movw	r22, r18
     d08:	90 01       	movw	r18, r0
     d0a:	0c 01       	movw	r0, r24
     d0c:	ca 01       	movw	r24, r20
     d0e:	a0 01       	movw	r20, r0
     d10:	11 24       	eor	r1, r1
     d12:	ff 27       	eor	r31, r31
     d14:	59 1b       	sub	r21, r25
     d16:	99 f0       	breq	.+38     	; 0xd3e <__addsf3x+0x60>
     d18:	59 3f       	cpi	r21, 0xF9	; 249
     d1a:	50 f4       	brcc	.+20     	; 0xd30 <__addsf3x+0x52>
     d1c:	50 3e       	cpi	r21, 0xE0	; 224
     d1e:	68 f1       	brcs	.+90     	; 0xd7a <__addsf3x+0x9c>
     d20:	1a 16       	cp	r1, r26
     d22:	f0 40       	sbci	r31, 0x00	; 0
     d24:	a2 2f       	mov	r26, r18
     d26:	23 2f       	mov	r18, r19
     d28:	34 2f       	mov	r19, r20
     d2a:	44 27       	eor	r20, r20
     d2c:	58 5f       	subi	r21, 0xF8	; 248
     d2e:	f3 cf       	rjmp	.-26     	; 0xd16 <__addsf3x+0x38>
     d30:	46 95       	lsr	r20
     d32:	37 95       	ror	r19
     d34:	27 95       	ror	r18
     d36:	a7 95       	ror	r26
     d38:	f0 40       	sbci	r31, 0x00	; 0
     d3a:	53 95       	inc	r21
     d3c:	c9 f7       	brne	.-14     	; 0xd30 <__addsf3x+0x52>
     d3e:	7e f4       	brtc	.+30     	; 0xd5e <__addsf3x+0x80>
     d40:	1f 16       	cp	r1, r31
     d42:	ba 0b       	sbc	r27, r26
     d44:	62 0b       	sbc	r22, r18
     d46:	73 0b       	sbc	r23, r19
     d48:	84 0b       	sbc	r24, r20
     d4a:	ba f0       	brmi	.+46     	; 0xd7a <__addsf3x+0x9c>
     d4c:	91 50       	subi	r25, 0x01	; 1
     d4e:	a1 f0       	breq	.+40     	; 0xd78 <__addsf3x+0x9a>
     d50:	ff 0f       	add	r31, r31
     d52:	bb 1f       	adc	r27, r27
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	88 1f       	adc	r24, r24
     d5a:	c2 f7       	brpl	.-16     	; 0xd4c <__addsf3x+0x6e>
     d5c:	0e c0       	rjmp	.+28     	; 0xd7a <__addsf3x+0x9c>
     d5e:	ba 0f       	add	r27, r26
     d60:	62 1f       	adc	r22, r18
     d62:	73 1f       	adc	r23, r19
     d64:	84 1f       	adc	r24, r20
     d66:	48 f4       	brcc	.+18     	; 0xd7a <__addsf3x+0x9c>
     d68:	87 95       	ror	r24
     d6a:	77 95       	ror	r23
     d6c:	67 95       	ror	r22
     d6e:	b7 95       	ror	r27
     d70:	f7 95       	ror	r31
     d72:	9e 3f       	cpi	r25, 0xFE	; 254
     d74:	08 f0       	brcs	.+2      	; 0xd78 <__addsf3x+0x9a>
     d76:	b0 cf       	rjmp	.-160    	; 0xcd8 <__addsf3+0x28>
     d78:	93 95       	inc	r25
     d7a:	88 0f       	add	r24, r24
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <__addsf3x+0xa2>
     d7e:	99 27       	eor	r25, r25
     d80:	ee 0f       	add	r30, r30
     d82:	97 95       	ror	r25
     d84:	87 95       	ror	r24
     d86:	08 95       	ret

00000d88 <__cmpsf2>:
     d88:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_cmp>
     d8c:	08 f4       	brcc	.+2      	; 0xd90 <__cmpsf2+0x8>
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	08 95       	ret

00000d92 <__divsf3>:
     d92:	0e 94 dd 06 	call	0xdba	; 0xdba <__divsf3x>
     d96:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_round>
     d9a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__fp_pscB>
     d9e:	58 f0       	brcs	.+22     	; 0xdb6 <__divsf3+0x24>
     da0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__fp_pscA>
     da4:	40 f0       	brcs	.+16     	; 0xdb6 <__divsf3+0x24>
     da6:	29 f4       	brne	.+10     	; 0xdb2 <__divsf3+0x20>
     da8:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
     daa:	29 f0       	breq	.+10     	; 0xdb6 <__divsf3+0x24>
     dac:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__fp_inf>
     db0:	51 11       	cpse	r21, r1
     db2:	0c 94 16 08 	jmp	0x102c	; 0x102c <__fp_szero>
     db6:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_nan>

00000dba <__divsf3x>:
__divsf3x():
     dba:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__fp_split3>
     dbe:	68 f3       	brcs	.-38     	; 0xd9a <__divsf3+0x8>

00000dc0 <__divsf3_pse>:
     dc0:	99 23       	and	r25, r25
     dc2:	b1 f3       	breq	.-20     	; 0xdb0 <__divsf3+0x1e>
     dc4:	55 23       	and	r21, r21
     dc6:	91 f3       	breq	.-28     	; 0xdac <__divsf3+0x1a>
     dc8:	95 1b       	sub	r25, r21
     dca:	55 0b       	sbc	r21, r21
     dcc:	bb 27       	eor	r27, r27
     dce:	aa 27       	eor	r26, r26
     dd0:	62 17       	cp	r22, r18
     dd2:	73 07       	cpc	r23, r19
     dd4:	84 07       	cpc	r24, r20
     dd6:	38 f0       	brcs	.+14     	; 0xde6 <__divsf3_pse+0x26>
     dd8:	9f 5f       	subi	r25, 0xFF	; 255
     dda:	5f 4f       	sbci	r21, 0xFF	; 255
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	44 1f       	adc	r20, r20
     de2:	aa 1f       	adc	r26, r26
     de4:	a9 f3       	breq	.-22     	; 0xdd0 <__divsf3_pse+0x10>
     de6:	35 d0       	rcall	.+106    	; 0xe52 <__divsf3_pse+0x92>
     de8:	0e 2e       	mov	r0, r30
     dea:	3a f0       	brmi	.+14     	; 0xdfa <__divsf3_pse+0x3a>
     dec:	e0 e8       	ldi	r30, 0x80	; 128
     dee:	32 d0       	rcall	.+100    	; 0xe54 <__divsf3_pse+0x94>
     df0:	91 50       	subi	r25, 0x01	; 1
     df2:	50 40       	sbci	r21, 0x00	; 0
     df4:	e6 95       	lsr	r30
     df6:	00 1c       	adc	r0, r0
     df8:	ca f7       	brpl	.-14     	; 0xdec <__divsf3_pse+0x2c>
     dfa:	2b d0       	rcall	.+86     	; 0xe52 <__divsf3_pse+0x92>
     dfc:	fe 2f       	mov	r31, r30
     dfe:	29 d0       	rcall	.+82     	; 0xe52 <__divsf3_pse+0x92>
     e00:	66 0f       	add	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	88 1f       	adc	r24, r24
     e06:	bb 1f       	adc	r27, r27
     e08:	26 17       	cp	r18, r22
     e0a:	37 07       	cpc	r19, r23
     e0c:	48 07       	cpc	r20, r24
     e0e:	ab 07       	cpc	r26, r27
     e10:	b0 e8       	ldi	r27, 0x80	; 128
     e12:	09 f0       	breq	.+2      	; 0xe16 <__divsf3_pse+0x56>
     e14:	bb 0b       	sbc	r27, r27
     e16:	80 2d       	mov	r24, r0
     e18:	bf 01       	movw	r22, r30
     e1a:	ff 27       	eor	r31, r31
     e1c:	93 58       	subi	r25, 0x83	; 131
     e1e:	5f 4f       	sbci	r21, 0xFF	; 255
     e20:	3a f0       	brmi	.+14     	; 0xe30 <__divsf3_pse+0x70>
     e22:	9e 3f       	cpi	r25, 0xFE	; 254
     e24:	51 05       	cpc	r21, r1
     e26:	78 f0       	brcs	.+30     	; 0xe46 <__divsf3_pse+0x86>
     e28:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__fp_inf>
     e2c:	0c 94 16 08 	jmp	0x102c	; 0x102c <__fp_szero>
     e30:	5f 3f       	cpi	r21, 0xFF	; 255
     e32:	e4 f3       	brlt	.-8      	; 0xe2c <__divsf3_pse+0x6c>
     e34:	98 3e       	cpi	r25, 0xE8	; 232
     e36:	d4 f3       	brlt	.-12     	; 0xe2c <__divsf3_pse+0x6c>
     e38:	86 95       	lsr	r24
     e3a:	77 95       	ror	r23
     e3c:	67 95       	ror	r22
     e3e:	b7 95       	ror	r27
     e40:	f7 95       	ror	r31
     e42:	9f 5f       	subi	r25, 0xFF	; 255
     e44:	c9 f7       	brne	.-14     	; 0xe38 <__divsf3_pse+0x78>
     e46:	88 0f       	add	r24, r24
     e48:	91 1d       	adc	r25, r1
     e4a:	96 95       	lsr	r25
     e4c:	87 95       	ror	r24
     e4e:	97 f9       	bld	r25, 7
     e50:	08 95       	ret
     e52:	e1 e0       	ldi	r30, 0x01	; 1
     e54:	66 0f       	add	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	88 1f       	adc	r24, r24
     e5a:	bb 1f       	adc	r27, r27
     e5c:	62 17       	cp	r22, r18
     e5e:	73 07       	cpc	r23, r19
     e60:	84 07       	cpc	r24, r20
     e62:	ba 07       	cpc	r27, r26
     e64:	20 f0       	brcs	.+8      	; 0xe6e <__divsf3_pse+0xae>
     e66:	62 1b       	sub	r22, r18
     e68:	73 0b       	sbc	r23, r19
     e6a:	84 0b       	sbc	r24, r20
     e6c:	ba 0b       	sbc	r27, r26
     e6e:	ee 1f       	adc	r30, r30
     e70:	88 f7       	brcc	.-30     	; 0xe54 <__divsf3_pse+0x94>
     e72:	e0 95       	com	r30
     e74:	08 95       	ret

00000e76 <__fixunssfsi>:
     e76:	0e 94 fb 07 	call	0xff6	; 0xff6 <__fp_splitA>
     e7a:	88 f0       	brcs	.+34     	; 0xe9e <__fixunssfsi+0x28>
     e7c:	9f 57       	subi	r25, 0x7F	; 127
     e7e:	98 f0       	brcs	.+38     	; 0xea6 <__fixunssfsi+0x30>
     e80:	b9 2f       	mov	r27, r25
     e82:	99 27       	eor	r25, r25
     e84:	b7 51       	subi	r27, 0x17	; 23
     e86:	b0 f0       	brcs	.+44     	; 0xeb4 <__fixunssfsi+0x3e>
     e88:	e1 f0       	breq	.+56     	; 0xec2 <__fixunssfsi+0x4c>
     e8a:	66 0f       	add	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	88 1f       	adc	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	1a f0       	brmi	.+6      	; 0xe9a <__fixunssfsi+0x24>
     e94:	ba 95       	dec	r27
__fixunssfsi():
     e96:	c9 f7       	brne	.-14     	; 0xe8a <__fixunssfsi+0x14>
     e98:	14 c0       	rjmp	.+40     	; 0xec2 <__fixunssfsi+0x4c>
     e9a:	b1 30       	cpi	r27, 0x01	; 1
     e9c:	91 f0       	breq	.+36     	; 0xec2 <__fixunssfsi+0x4c>
     e9e:	0e 94 15 08 	call	0x102a	; 0x102a <__fp_zero>
     ea2:	b1 e0       	ldi	r27, 0x01	; 1
     ea4:	08 95       	ret
     ea6:	0c 94 15 08 	jmp	0x102a	; 0x102a <__fp_zero>
     eaa:	67 2f       	mov	r22, r23
     eac:	78 2f       	mov	r23, r24
     eae:	88 27       	eor	r24, r24
     eb0:	b8 5f       	subi	r27, 0xF8	; 248
     eb2:	39 f0       	breq	.+14     	; 0xec2 <__fixunssfsi+0x4c>
     eb4:	b9 3f       	cpi	r27, 0xF9	; 249
     eb6:	cc f3       	brlt	.-14     	; 0xeaa <__fixunssfsi+0x34>
     eb8:	86 95       	lsr	r24
     eba:	77 95       	ror	r23
     ebc:	67 95       	ror	r22
     ebe:	b3 95       	inc	r27
     ec0:	d9 f7       	brne	.-10     	; 0xeb8 <__fixunssfsi+0x42>
     ec2:	3e f4       	brtc	.+14     	; 0xed2 <__fixunssfsi+0x5c>
     ec4:	90 95       	com	r25
     ec6:	80 95       	com	r24
     ec8:	70 95       	com	r23
     eca:	61 95       	neg	r22
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	8f 4f       	sbci	r24, 0xFF	; 255
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	08 95       	ret

00000ed4 <__floatunsisf>:
__floatunsisf():
     ed4:	e8 94       	clt
     ed6:	09 c0       	rjmp	.+18     	; 0xeea <__floatsisf+0x12>

00000ed8 <__floatsisf>:
     ed8:	97 fb       	bst	r25, 7
     eda:	3e f4       	brtc	.+14     	; 0xeea <__floatsisf+0x12>
     edc:	90 95       	com	r25
     ede:	80 95       	com	r24
     ee0:	70 95       	com	r23
     ee2:	61 95       	neg	r22
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	8f 4f       	sbci	r24, 0xFF	; 255
     ee8:	9f 4f       	sbci	r25, 0xFF	; 255
     eea:	99 23       	and	r25, r25
     eec:	a9 f0       	breq	.+42     	; 0xf18 <__floatsisf+0x40>
     eee:	f9 2f       	mov	r31, r25
     ef0:	96 e9       	ldi	r25, 0x96	; 150
     ef2:	bb 27       	eor	r27, r27
     ef4:	93 95       	inc	r25
     ef6:	f6 95       	lsr	r31
     ef8:	87 95       	ror	r24
     efa:	77 95       	ror	r23
     efc:	67 95       	ror	r22
     efe:	b7 95       	ror	r27
     f00:	f1 11       	cpse	r31, r1
     f02:	f8 cf       	rjmp	.-16     	; 0xef4 <__floatsisf+0x1c>
     f04:	fa f4       	brpl	.+62     	; 0xf44 <__floatsisf+0x6c>
     f06:	bb 0f       	add	r27, r27
     f08:	11 f4       	brne	.+4      	; 0xf0e <__floatsisf+0x36>
     f0a:	60 ff       	sbrs	r22, 0
     f0c:	1b c0       	rjmp	.+54     	; 0xf44 <__floatsisf+0x6c>
     f0e:	6f 5f       	subi	r22, 0xFF	; 255
     f10:	7f 4f       	sbci	r23, 0xFF	; 255
     f12:	8f 4f       	sbci	r24, 0xFF	; 255
     f14:	9f 4f       	sbci	r25, 0xFF	; 255
     f16:	16 c0       	rjmp	.+44     	; 0xf44 <__floatsisf+0x6c>
     f18:	88 23       	and	r24, r24
     f1a:	11 f0       	breq	.+4      	; 0xf20 <__floatsisf+0x48>
     f1c:	96 e9       	ldi	r25, 0x96	; 150
     f1e:	11 c0       	rjmp	.+34     	; 0xf42 <__floatsisf+0x6a>
     f20:	77 23       	and	r23, r23
     f22:	21 f0       	breq	.+8      	; 0xf2c <__floatsisf+0x54>
     f24:	9e e8       	ldi	r25, 0x8E	; 142
     f26:	87 2f       	mov	r24, r23
     f28:	76 2f       	mov	r23, r22
     f2a:	05 c0       	rjmp	.+10     	; 0xf36 <__floatsisf+0x5e>
     f2c:	66 23       	and	r22, r22
     f2e:	71 f0       	breq	.+28     	; 0xf4c <__floatsisf+0x74>
     f30:	96 e8       	ldi	r25, 0x86	; 134
     f32:	86 2f       	mov	r24, r22
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	2a f0       	brmi	.+10     	; 0xf44 <__floatsisf+0x6c>
     f3a:	9a 95       	dec	r25
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	da f7       	brpl	.-10     	; 0xf3a <__floatsisf+0x62>
     f44:	88 0f       	add	r24, r24
     f46:	96 95       	lsr	r25
     f48:	87 95       	ror	r24
     f4a:	97 f9       	bld	r25, 7
     f4c:	08 95       	ret

00000f4e <__fp_cmp>:
__fp_cmp():
     f4e:	99 0f       	add	r25, r25
     f50:	00 08       	sbc	r0, r0
     f52:	55 0f       	add	r21, r21
     f54:	aa 0b       	sbc	r26, r26
     f56:	e0 e8       	ldi	r30, 0x80	; 128
     f58:	fe ef       	ldi	r31, 0xFE	; 254
     f5a:	16 16       	cp	r1, r22
     f5c:	17 06       	cpc	r1, r23
     f5e:	e8 07       	cpc	r30, r24
     f60:	f9 07       	cpc	r31, r25
     f62:	c0 f0       	brcs	.+48     	; 0xf94 <__fp_cmp+0x46>
     f64:	12 16       	cp	r1, r18
     f66:	13 06       	cpc	r1, r19
     f68:	e4 07       	cpc	r30, r20
     f6a:	f5 07       	cpc	r31, r21
     f6c:	98 f0       	brcs	.+38     	; 0xf94 <__fp_cmp+0x46>
     f6e:	62 1b       	sub	r22, r18
     f70:	73 0b       	sbc	r23, r19
     f72:	84 0b       	sbc	r24, r20
     f74:	95 0b       	sbc	r25, r21
     f76:	39 f4       	brne	.+14     	; 0xf86 <__fp_cmp+0x38>
     f78:	0a 26       	eor	r0, r26
     f7a:	61 f0       	breq	.+24     	; 0xf94 <__fp_cmp+0x46>
     f7c:	23 2b       	or	r18, r19
     f7e:	24 2b       	or	r18, r20
     f80:	25 2b       	or	r18, r21
     f82:	21 f4       	brne	.+8      	; 0xf8c <__fp_cmp+0x3e>
     f84:	08 95       	ret
     f86:	0a 26       	eor	r0, r26
     f88:	09 f4       	brne	.+2      	; 0xf8c <__fp_cmp+0x3e>
     f8a:	a1 40       	sbci	r26, 0x01	; 1
     f8c:	a6 95       	lsr	r26
     f8e:	8f ef       	ldi	r24, 0xFF	; 255
     f90:	81 1d       	adc	r24, r1
     f92:	81 1d       	adc	r24, r1
     f94:	08 95       	ret

00000f96 <__fp_inf>:
__fp_inf():
     f96:	97 f9       	bld	r25, 7
     f98:	9f 67       	ori	r25, 0x7F	; 127
     f9a:	80 e8       	ldi	r24, 0x80	; 128
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	08 95       	ret

00000fa2 <__fp_nan>:
__fp_nan():
     fa2:	9f ef       	ldi	r25, 0xFF	; 255
     fa4:	80 ec       	ldi	r24, 0xC0	; 192
     fa6:	08 95       	ret

00000fa8 <__fp_pscA>:
__fp_pscA():
     fa8:	00 24       	eor	r0, r0
     faa:	0a 94       	dec	r0
     fac:	16 16       	cp	r1, r22
     fae:	17 06       	cpc	r1, r23
     fb0:	18 06       	cpc	r1, r24
     fb2:	09 06       	cpc	r0, r25
     fb4:	08 95       	ret

00000fb6 <__fp_pscB>:
__fp_pscB():
     fb6:	00 24       	eor	r0, r0
     fb8:	0a 94       	dec	r0
     fba:	12 16       	cp	r1, r18
     fbc:	13 06       	cpc	r1, r19
     fbe:	14 06       	cpc	r1, r20
     fc0:	05 06       	cpc	r0, r21
     fc2:	08 95       	ret

00000fc4 <__fp_round>:
__fp_round():
     fc4:	09 2e       	mov	r0, r25
     fc6:	03 94       	inc	r0
     fc8:	00 0c       	add	r0, r0
     fca:	11 f4       	brne	.+4      	; 0xfd0 <__fp_round+0xc>
     fcc:	88 23       	and	r24, r24
     fce:	52 f0       	brmi	.+20     	; 0xfe4 <__fp_round+0x20>
     fd0:	bb 0f       	add	r27, r27
     fd2:	40 f4       	brcc	.+16     	; 0xfe4 <__fp_round+0x20>
     fd4:	bf 2b       	or	r27, r31
     fd6:	11 f4       	brne	.+4      	; 0xfdc <__fp_round+0x18>
     fd8:	60 ff       	sbrs	r22, 0
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <__fp_round+0x20>
     fdc:	6f 5f       	subi	r22, 0xFF	; 255
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	8f 4f       	sbci	r24, 0xFF	; 255
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	08 95       	ret

00000fe6 <__fp_split3>:
__fp_split3():
     fe6:	57 fd       	sbrc	r21, 7
     fe8:	90 58       	subi	r25, 0x80	; 128
     fea:	44 0f       	add	r20, r20
     fec:	55 1f       	adc	r21, r21
     fee:	59 f0       	breq	.+22     	; 0x1006 <__fp_splitA+0x10>
     ff0:	5f 3f       	cpi	r21, 0xFF	; 255
     ff2:	71 f0       	breq	.+28     	; 0x1010 <__fp_splitA+0x1a>
     ff4:	47 95       	ror	r20

00000ff6 <__fp_splitA>:
     ff6:	88 0f       	add	r24, r24
     ff8:	97 fb       	bst	r25, 7
     ffa:	99 1f       	adc	r25, r25
     ffc:	61 f0       	breq	.+24     	; 0x1016 <__fp_splitA+0x20>
     ffe:	9f 3f       	cpi	r25, 0xFF	; 255
    1000:	79 f0       	breq	.+30     	; 0x1020 <__fp_splitA+0x2a>
    1002:	87 95       	ror	r24
    1004:	08 95       	ret
    1006:	12 16       	cp	r1, r18
    1008:	13 06       	cpc	r1, r19
    100a:	14 06       	cpc	r1, r20
    100c:	55 1f       	adc	r21, r21
    100e:	f2 cf       	rjmp	.-28     	; 0xff4 <__fp_split3+0xe>
    1010:	46 95       	lsr	r20
    1012:	f1 df       	rcall	.-30     	; 0xff6 <__fp_splitA>
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <__fp_splitA+0x30>
    1016:	16 16       	cp	r1, r22
    1018:	17 06       	cpc	r1, r23
    101a:	18 06       	cpc	r1, r24
    101c:	99 1f       	adc	r25, r25
    101e:	f1 cf       	rjmp	.-30     	; 0x1002 <__fp_splitA+0xc>
    1020:	86 95       	lsr	r24
    1022:	71 05       	cpc	r23, r1
    1024:	61 05       	cpc	r22, r1
    1026:	08 94       	sec
    1028:	08 95       	ret

0000102a <__fp_zero>:
__fp_zero():
    102a:	e8 94       	clt

0000102c <__fp_szero>:
    102c:	bb 27       	eor	r27, r27
    102e:	66 27       	eor	r22, r22
    1030:	77 27       	eor	r23, r23
    1032:	cb 01       	movw	r24, r22
    1034:	97 f9       	bld	r25, 7
    1036:	08 95       	ret

00001038 <__gesf2>:
__gesf2():
    1038:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_cmp>
    103c:	08 f4       	brcc	.+2      	; 0x1040 <__gesf2+0x8>
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	08 95       	ret

00001042 <__mulsf3>:
__mulsf3():
    1042:	0e 94 34 08 	call	0x1068	; 0x1068 <__mulsf3x>
    1046:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_round>
    104a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__fp_pscA>
    104e:	38 f0       	brcs	.+14     	; 0x105e <__mulsf3+0x1c>
    1050:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__fp_pscB>
    1054:	20 f0       	brcs	.+8      	; 0x105e <__mulsf3+0x1c>
    1056:	95 23       	and	r25, r21
    1058:	11 f0       	breq	.+4      	; 0x105e <__mulsf3+0x1c>
    105a:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__fp_inf>
    105e:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_nan>
    1062:	11 24       	eor	r1, r1
    1064:	0c 94 16 08 	jmp	0x102c	; 0x102c <__fp_szero>

00001068 <__mulsf3x>:
__mulsf3x():
    1068:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__fp_split3>
    106c:	70 f3       	brcs	.-36     	; 0x104a <__mulsf3+0x8>

0000106e <__mulsf3_pse>:
    106e:	95 9f       	mul	r25, r21
    1070:	c1 f3       	breq	.-16     	; 0x1062 <__mulsf3+0x20>
    1072:	95 0f       	add	r25, r21
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	55 1f       	adc	r21, r21
    1078:	62 9f       	mul	r22, r18
    107a:	f0 01       	movw	r30, r0
    107c:	72 9f       	mul	r23, r18
    107e:	bb 27       	eor	r27, r27
    1080:	f0 0d       	add	r31, r0
    1082:	b1 1d       	adc	r27, r1
    1084:	63 9f       	mul	r22, r19
    1086:	aa 27       	eor	r26, r26
    1088:	f0 0d       	add	r31, r0
    108a:	b1 1d       	adc	r27, r1
    108c:	aa 1f       	adc	r26, r26
    108e:	64 9f       	mul	r22, r20
    1090:	66 27       	eor	r22, r22
    1092:	b0 0d       	add	r27, r0
    1094:	a1 1d       	adc	r26, r1
    1096:	66 1f       	adc	r22, r22
    1098:	82 9f       	mul	r24, r18
    109a:	22 27       	eor	r18, r18
    109c:	b0 0d       	add	r27, r0
    109e:	a1 1d       	adc	r26, r1
    10a0:	62 1f       	adc	r22, r18
    10a2:	73 9f       	mul	r23, r19
    10a4:	b0 0d       	add	r27, r0
    10a6:	a1 1d       	adc	r26, r1
    10a8:	62 1f       	adc	r22, r18
    10aa:	83 9f       	mul	r24, r19
    10ac:	a0 0d       	add	r26, r0
    10ae:	61 1d       	adc	r22, r1
    10b0:	22 1f       	adc	r18, r18
    10b2:	74 9f       	mul	r23, r20
    10b4:	33 27       	eor	r19, r19
    10b6:	a0 0d       	add	r26, r0
    10b8:	61 1d       	adc	r22, r1
    10ba:	23 1f       	adc	r18, r19
    10bc:	84 9f       	mul	r24, r20
    10be:	60 0d       	add	r22, r0
    10c0:	21 1d       	adc	r18, r1
    10c2:	82 2f       	mov	r24, r18
    10c4:	76 2f       	mov	r23, r22
    10c6:	6a 2f       	mov	r22, r26
    10c8:	11 24       	eor	r1, r1
    10ca:	9f 57       	subi	r25, 0x7F	; 127
    10cc:	50 40       	sbci	r21, 0x00	; 0
    10ce:	9a f0       	brmi	.+38     	; 0x10f6 <__mulsf3_pse+0x88>
    10d0:	f1 f0       	breq	.+60     	; 0x110e <__mulsf3_pse+0xa0>
    10d2:	88 23       	and	r24, r24
    10d4:	4a f0       	brmi	.+18     	; 0x10e8 <__mulsf3_pse+0x7a>
    10d6:	ee 0f       	add	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	bb 1f       	adc	r27, r27
    10dc:	66 1f       	adc	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	88 1f       	adc	r24, r24
    10e2:	91 50       	subi	r25, 0x01	; 1
    10e4:	50 40       	sbci	r21, 0x00	; 0
    10e6:	a9 f7       	brne	.-22     	; 0x10d2 <__mulsf3_pse+0x64>
    10e8:	9e 3f       	cpi	r25, 0xFE	; 254
    10ea:	51 05       	cpc	r21, r1
    10ec:	80 f0       	brcs	.+32     	; 0x110e <__mulsf3_pse+0xa0>
    10ee:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__fp_inf>
    10f2:	0c 94 16 08 	jmp	0x102c	; 0x102c <__fp_szero>
    10f6:	5f 3f       	cpi	r21, 0xFF	; 255
    10f8:	e4 f3       	brlt	.-8      	; 0x10f2 <__mulsf3_pse+0x84>
    10fa:	98 3e       	cpi	r25, 0xE8	; 232
    10fc:	d4 f3       	brlt	.-12     	; 0x10f2 <__mulsf3_pse+0x84>
    10fe:	86 95       	lsr	r24
    1100:	77 95       	ror	r23
    1102:	67 95       	ror	r22
    1104:	b7 95       	ror	r27
    1106:	f7 95       	ror	r31
    1108:	e7 95       	ror	r30
    110a:	9f 5f       	subi	r25, 0xFF	; 255
    110c:	c1 f7       	brne	.-16     	; 0x10fe <__mulsf3_pse+0x90>
    110e:	fe 2b       	or	r31, r30
    1110:	88 0f       	add	r24, r24
    1112:	91 1d       	adc	r25, r1
    1114:	96 95       	lsr	r25
    1116:	87 95       	ror	r24
    1118:	97 f9       	bld	r25, 7
    111a:	08 95       	ret

0000111c <__unordsf2>:
    111c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_cmp>
    1120:	88 0b       	sbc	r24, r24
    1122:	99 0b       	sbc	r25, r25
    1124:	08 95       	ret

00001126 <__udivmodsi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1126:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1128:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    112a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    112c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    112e:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1130:	0d c0       	rjmp	.+26     	; 0x114c <__udivmodsi4_ep>

00001132 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1132:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1134:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1136:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1138:	ff 1f       	adc	r31, r31
__udivmodsi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    113a:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    113c:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    113e:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1140:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1142:	20 f0       	brcs	.+8      	; 0x114c <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1144:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1146:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1148:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    114a:	f5 0b       	sbc	r31, r21

0000114c <__udivmodsi4_ep>:
__udivmodsi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    114c:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    114e:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1150:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1152:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1154:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1156:	69 f7       	brne	.-38     	; 0x1132 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1158:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    115a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    115c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    115e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1160:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1162:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1164:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1166:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1168:	08 95       	ret

0000116a <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    116a:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    116c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    116e:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1170:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1172:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1174:	09 94       	ijmp

00001176 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1176:	f8 94       	cli

00001178 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1178:	ff cf       	rjmp	.-2      	; 0x1178 <__stop_program>
